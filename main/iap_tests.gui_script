local broadcast = require("ludobits.m.broadcast")
local iap_manager = require("iap_manager.iap_manager")

local function register_products(self)
	self.products = {
		{
			ident = "com.test.product",
			is_consumable = false
		},
	}
	iap_manager.register_products(self.products)
end
	

function init(self)
	msg.post(".", "acquire_input_focus")
	
	register_products(self)
	
	iap_manager.init()

	broadcast.register("iap_purchased", function(message, sender)
		print("Got message...")
		pprint(message)
		if message.ident == self.products[1].ident then
			gui.set_text(gui.get_node("text_test_product_is_owned"), "Is Owned: True (Purchased)")
		end
	end)

	broadcast.register("iap_restored", function(message, sender)
		if message.ident == self.products[1].ident then
			gui.set_text(gui.get_node("text_test_product_is_owned"), "Is Owned: True (Restored)")
		end
	end)
	
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	broadcast.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	if gui.pick_node(gui.get_node("btn_buy_test_iap"), action.x, action.y) and action.released then
		iap_manager.buy(self.products[1].ident)
	end
	if gui.pick_node(gui.get_node("btn_reset_all_iap"), action.x, action.y) and action.released then
		iap_manager.force_finish_all()
		gui.set_text(gui.get_node("text_test_product_is_owned"), "Is Owned: False (Reset)")
	end
	if gui.pick_node(gui.get_node("btn_restore_purchases"), action.x, action.y) and action.released then
		iap_manager.restore_owned()
	end	
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
